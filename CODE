module fifo_16x8 (
    input wire clk,           // Clock input
    input wire rst,           // Synchronous reset
    input wire wr_en,         // Write enable
    input wire rd_en,         // Read enable
    input wire [7:0] data_in, // 8-bit data input
    output reg [7:0] data_out,// 8-bit data output
    output wire full,         // FIFO full flag
    output wire empty         // FIFO empty flag
);

    // Parameters
    parameter DATA_WIDTH = 8;
    parameter FIFO_DEPTH = 16;
    parameter ADDR_WIDTH = $clog2(FIFO_DEPTH); // 4 bits for addressing 16 locations

    // Internal registers
    reg [DATA_WIDTH-1:0] mem [0:FIFO_DEPTH-1]; // Memory array
    reg [ADDR_WIDTH-1:0] wr_ptr;              // Write pointer
    reg [ADDR_WIDTH-1:0] rd_ptr;              // Read pointer

    // Status flags
    assign full  = ((wr_ptr + 1) == rd_ptr);
    assign empty = (wr_ptr == rd_ptr);

    // Write and read operations
    always @(posedge clk) begin
        if (rst) begin
            wr_ptr <= 0;
            rd_ptr <= 0;
            data_out <= 0;
        end else begin
            // Write to FIFO
            if (wr_en && !full) begin
                mem[wr_ptr] <= data_in;
                wr_ptr <= wr_ptr + 1;
            end
            // Read from FIFO
            if (rd_en && !empty) begin
                data_out <= mem[rd_ptr];
                rd_ptr <= rd_ptr + 1;
            end
        end
    end

endmodule
